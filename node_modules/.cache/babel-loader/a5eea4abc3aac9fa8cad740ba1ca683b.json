{"ast":null,"code":"import { call, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { get } from 'lodash';\nimport * as actions from './actions';\nimport * as types from '../types';\nimport axios from '../../../services/axios';\nimport history from '../../../services/history'; // Funciona com fosse async function\n\nfunction* loginRequest({\n  payload\n}) {\n  try {\n    const response = yield call(axios.post, '/tokens', payload);\n    yield put(actions.loginSuccess({ ...response.data\n    }));\n    toast.success('Login feito com sucesso');\n    axios.defaults.headers.Authorization = `Bearer ${response.data.token}`;\n    history.push(payload.prevPath);\n  } catch (e) {\n    toast.error('Usuário ou senha inválido');\n    yield put(actions.loginFailure());\n  }\n}\n\nfunction persistRehydrate({\n  payload\n}) {\n  const token = get(payload, 'auth.token', '');\n  if (!token) return;\n  axios.defaults.headers.Authorization = `Bearer ${token}`;\n} // eslint-disable-next-line consistent-return\n\n\nfunction* registerRequest({\n  payload\n}) {\n  const {\n    id,\n    nome,\n    email,\n    password\n  } = payload;\n\n  try {\n    // Vai editar a conta\n    if (id) {\n      yield call(axios.put, '/users', {\n        email,\n        nome,\n        password: password || undefined\n      });\n      toast.success('Dados alterados com sucesso');\n      yield put(actions.registerUpdatedSuccess({\n        nome,\n        email,\n        password\n      }));\n    } // Vai criar a conta\n    else {\n        yield call(axios.post, '/users', {\n          email,\n          nome,\n          password\n        });\n        toast.success('Conta criada com sucesso');\n        yield put(actions.registerCreatedSuccess({\n          nome,\n          email,\n          password\n        }));\n        history.push('/login');\n      }\n  } catch (err) {\n    const errors = get(err, 'response.data.errors', []);\n    const status = get(err, 'response.status', 0);\n\n    if (status === 401) {\n      toast.error('Você precisa fazer login novamente');\n      yield put(actions.loginFailure());\n      return history.push('/login');\n    }\n\n    if (errors.lenght > 0) {\n      errors.map(error => toast.error(error));\n    } else {\n      toast.error('Error desconhecido');\n    }\n\n    yield put(actions.registerFailure());\n  }\n}\n\nexport default all([takeLatest(types.LOGIN_REQUEST, loginRequest), takeLatest(types.REGISTER_REQUEST, registerRequest), takeLatest(types.PERSIST_REHYDRATE, persistRehydrate)]);","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/apiconsume/src/store/modules/auth/sagas.js"],"names":["call","put","all","takeLatest","toast","get","actions","types","axios","history","loginRequest","payload","response","post","loginSuccess","data","success","defaults","headers","Authorization","token","push","prevPath","e","error","loginFailure","persistRehydrate","registerRequest","id","nome","email","password","undefined","registerUpdatedSuccess","registerCreatedSuccess","err","errors","status","lenght","map","registerFailure","LOGIN_REQUEST","REGISTER_REQUEST","PERSIST_REHYDRATE"],"mappings":"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","sourcesContent":["import { call, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { get } from 'lodash';\n\nimport * as actions from './actions';\nimport * as types from '../types';\nimport axios from '../../../services/axios';\nimport history from '../../../services/history';\n\n// Funciona com fosse async function\nfunction* loginRequest({ payload }) {\n  try {\n    const response = yield call(axios.post, '/tokens', payload);\n    yield put(actions.loginSuccess({ ...response.data }));\n\n    toast.success('Login feito com sucesso');\n\n    axios.defaults.headers.Authorization = `Bearer ${response.data.token}`;\n    history.push(payload.prevPath);\n  } catch (e) {\n    toast.error('Usuário ou senha inválido');\n\n    yield put(actions.loginFailure());\n  }\n}\n\nfunction persistRehydrate({ payload }) {\n  const token = get(payload, 'auth.token', '');\n\n  if (!token) return;\n  axios.defaults.headers.Authorization = `Bearer ${token}`;\n}\n\n// eslint-disable-next-line consistent-return\nfunction* registerRequest({ payload }) {\n  const { id, nome, email, password } = payload;\n\n  try {\n    // Vai editar a conta\n    if (id) {\n      yield call(axios.put, '/users', {\n        email,\n        nome,\n        password: password || undefined,\n      });\n\n      toast.success('Dados alterados com sucesso');\n      yield put(actions.registerUpdatedSuccess({ nome, email, password }));\n    } // Vai criar a conta\n    else {\n      yield call(axios.post, '/users', {\n        email,\n        nome,\n        password,\n      });\n\n      toast.success('Conta criada com sucesso');\n      yield put(actions.registerCreatedSuccess({ nome, email, password }));\n      history.push('/login');\n    }\n  } catch (err) {\n    const errors = get(err, 'response.data.errors', []);\n    const status = get(err, 'response.status', 0);\n\n    if (status === 401) {\n      toast.error('Você precisa fazer login novamente');\n      yield put(actions.loginFailure());\n      return history.push('/login');\n    }\n\n    if (errors.lenght > 0) {\n      errors.map((error) => toast.error(error));\n    } else {\n      toast.error('Error desconhecido');\n    }\n\n    yield put(actions.registerFailure());\n  }\n}\n\nexport default all([\n  takeLatest(types.LOGIN_REQUEST, loginRequest),\n  takeLatest(types.REGISTER_REQUEST, registerRequest),\n  takeLatest(types.PERSIST_REHYDRATE, persistRehydrate),\n]);\n"]},"metadata":{},"sourceType":"module"}