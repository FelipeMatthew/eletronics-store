{"ast":null,"code":"import * as types from '../types';\nimport axios from '../../../services/axios'; // É o que vai manter o usuário conectado\n\nconst initialState = {\n  isLoggedIn: false,\n  token: false,\n  user: {},\n  isLoading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    // Login reducer\n    case types.LOGIN_SUCCESS:\n      {\n        const newState = { ...state\n        };\n        newState.isLoggedIn = true;\n        newState.token = action.payload.token;\n        newState.user = action.payload.user;\n        newState.isLoading = false;\n        return newState;\n      }\n\n    case types.LOGIN_FAILURE:\n      {\n        delete axios.defaults.headers.Authorization;\n        const newState = { ...initialState\n        };\n        return newState;\n      }\n\n    case types.LOGIN_REQUEST:\n      {\n        const newState = { ...state\n        };\n        newState.isLoading = true;\n        return newState;\n      }\n    // Register reducer\n\n    case types.REGISTER_UPDATED_SUCCESS:\n      {\n        const newState = { ...state\n        };\n        newState.user.nome = action.payload.nome;\n        newState.user.email = action.payload.email;\n        newState.isLoading = false;\n        return newState;\n      }\n\n    case types.REGISTER_CREATED_SUCCESS:\n      {\n        const newState = { ...state\n        };\n        newState.isLoading = false;\n        return newState;\n      }\n\n    case types.REGISTER_FAILURE:\n      {\n        const newState = { ...state\n        };\n        newState.isLoading = false;\n        return newState;\n      }\n\n    case types.REGISTER_REQUEST:\n      {\n        const newState = { ...state\n        };\n        newState.isLoading = true;\n        return newState;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/apiconsume/src/store/modules/auth/reducer.js"],"names":["types","axios","initialState","isLoggedIn","token","user","isLoading","state","action","type","LOGIN_SUCCESS","newState","payload","LOGIN_FAILURE","defaults","headers","Authorization","LOGIN_REQUEST","REGISTER_UPDATED_SUCCESS","nome","email","REGISTER_CREATED_SUCCESS","REGISTER_FAILURE","REGISTER_REQUEST"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBC,EAAAA,SAAS,EAAE;AAJQ,CAArB;AAOA,eAAe,UAAUC,KAAK,GAAGL,YAAlB,EAAgCM,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKT,KAAK,CAACU,aAAX;AAA0B;AACxB,cAAMC,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AAEAI,QAAAA,QAAQ,CAACR,UAAT,GAAsB,IAAtB;AACAQ,QAAAA,QAAQ,CAACP,KAAT,GAAiBI,MAAM,CAACI,OAAP,CAAeR,KAAhC;AACAO,QAAAA,QAAQ,CAACN,IAAT,GAAgBG,MAAM,CAACI,OAAP,CAAeP,IAA/B;AACAM,QAAAA,QAAQ,CAACL,SAAT,GAAqB,KAArB;AAEA,eAAOK,QAAP;AACD;;AAED,SAAKX,KAAK,CAACa,aAAX;AAA0B;AACxB,eAAOZ,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBC,aAA9B;AACA,cAAML,QAAQ,GAAG,EAAE,GAAGT;AAAL,SAAjB;AACA,eAAOS,QAAP;AACD;;AAED,SAAKX,KAAK,CAACiB,aAAX;AAA0B;AACxB,cAAMN,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AACAI,QAAAA,QAAQ,CAACL,SAAT,GAAqB,IAArB;AACA,eAAOK,QAAP;AACD;AAED;;AACA,SAAKX,KAAK,CAACkB,wBAAX;AAAqC;AACnC,cAAMP,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AACAI,QAAAA,QAAQ,CAACN,IAAT,CAAcc,IAAd,GAAqBX,MAAM,CAACI,OAAP,CAAeO,IAApC;AACAR,QAAAA,QAAQ,CAACN,IAAT,CAAce,KAAd,GAAsBZ,MAAM,CAACI,OAAP,CAAeQ,KAArC;AACAT,QAAAA,QAAQ,CAACL,SAAT,GAAqB,KAArB;AACA,eAAOK,QAAP;AACD;;AAED,SAAKX,KAAK,CAACqB,wBAAX;AAAqC;AACnC,cAAMV,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AACAI,QAAAA,QAAQ,CAACL,SAAT,GAAqB,KAArB;AACA,eAAOK,QAAP;AACD;;AAED,SAAKX,KAAK,CAACsB,gBAAX;AAA6B;AAC3B,cAAMX,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AACAI,QAAAA,QAAQ,CAACL,SAAT,GAAqB,KAArB;AACA,eAAOK,QAAP;AACD;;AAED,SAAKX,KAAK,CAACuB,gBAAX;AAA6B;AAC3B,cAAMZ,QAAQ,GAAG,EAAE,GAAGJ;AAAL,SAAjB;AACAI,QAAAA,QAAQ,CAACL,SAAT,GAAqB,IAArB;AACA,eAAOK,QAAP;AACD;;AAED;AAAS;AACP,eAAOJ,KAAP;AACD;AAtDH;AAwDD","sourcesContent":["import * as types from '../types';\nimport axios from '../../../services/axios';\n\n// É o que vai manter o usuário conectado\nconst initialState = {\n  isLoggedIn: false,\n  token: false,\n  user: {},\n  isLoading: false,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    // Login reducer\n    case types.LOGIN_SUCCESS: {\n      const newState = { ...state };\n\n      newState.isLoggedIn = true;\n      newState.token = action.payload.token;\n      newState.user = action.payload.user;\n      newState.isLoading = false;\n\n      return newState;\n    }\n\n    case types.LOGIN_FAILURE: {\n      delete axios.defaults.headers.Authorization;\n      const newState = { ...initialState };\n      return newState;\n    }\n\n    case types.LOGIN_REQUEST: {\n      const newState = { ...state };\n      newState.isLoading = true;\n      return newState;\n    }\n\n    // Register reducer\n    case types.REGISTER_UPDATED_SUCCESS: {\n      const newState = { ...state };\n      newState.user.nome = action.payload.nome;\n      newState.user.email = action.payload.email;\n      newState.isLoading = false;\n      return newState;\n    }\n\n    case types.REGISTER_CREATED_SUCCESS: {\n      const newState = { ...state };\n      newState.isLoading = false;\n      return newState;\n    }\n\n    case types.REGISTER_FAILURE: {\n      const newState = { ...state };\n      newState.isLoading = false;\n      return newState;\n    }\n\n    case types.REGISTER_REQUEST: {\n      const newState = { ...state };\n      newState.isLoading = true;\n      return newState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}